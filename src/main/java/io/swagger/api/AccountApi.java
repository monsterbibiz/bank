/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.Generated;
import javax.validation.Valid;

@Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-06-19T00:17:48.039Z")

@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Creating an account", nickname = "createAccount", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/account",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createAccount(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody Account body);


    @ApiOperation(value = "Delete account", nickname = "deleteAccountById", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operation successful"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccountById(@ApiParam(value = "",required=true) @PathVariable("accountId") Long accountId);


    @ApiOperation(value = "Getting account info by id", nickname = "getAccountById", notes = "", response = Account.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> getAccountById(@ApiParam(value = "",required=true) @PathVariable("accountId") Long accountId);


    @ApiOperation(value = "Updated account", nickname = "updateAccountById", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid account supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Account> updateAccountById(@ApiParam(value = "",required=true) @PathVariable("accountId") Long accountId,@ApiParam(value = "Updated account object" ,required=true )  @Valid @RequestBody Account body);

}
